#+TITLE:  Test kalign on BAliBASE 
#+AUTHOR: Timo Lassmann
#+EMAIL:  timo.lassmann@telethonkids.org.au
#+DATE:   2019-04-23
#+LATEX_CLASS: report
#+OPTIONS:  toc:nil
#+OPTIONS: H:4
#+LATEX_CMD: pdflatex
* Introduction 
  Let's run kalign on the core BAliBASE test alignments. 
  
* Method 

** Step 1: install balibase 

   #+BEGIN_SRC sh
     cd 
     mkdir -p data
     cd data
     if [ ! -f BAliBASE_R1-5.tar.gz ]; then
         wget https://www.lbgi.fr/balibase/BalibaseDownload/BAliBASE_R1-5.tar.gz

     fi
     tar -zxvf  BAliBASE_R1-5.tar.gz
   #+END_SRC

   #+RESULTS:

   BAliBASE comes with a C program to score alignments. Unfortunately, something is wrong with the bundled expat library. To fix this install expat system and remove the links to the bundled library by editing the makefile: 

   #+BEGIN_EXAMPLE makefile 
   CC	= cc
   CFLAGS  = -c -O #-I$(EXPAT_INC)
   LFLAGS	= -O -lm -lexpat #-L$(EXPAT_LIB) -lexpat
   EXPAT_LIB	= expat-1.95.2/lib
   EXPAT_INC	= expat-1.95.2/include
   #+END_EXAMPLE

   Also, by default bali_score will use all columns for the TC score. In the original clustal omega paper only core blocks are used to calculate the TC scores supercite:sievers-2014-fast-scalab. To change this modify =bali_score.c= line 104 from: 

   #+BEGIN_EXAMPLE C 
   method='C' 
   #+END_EXAMPLE

   to: 

   #+BEGIN_EXAMPLE C 
   method='B' 
   #+END_EXAMPLE

   Then compile:

   #+BEGIN_SRC sh 
     cd ~/data/bb3_release/bali_score_src
     make 
   #+END_SRC

   #+RESULTS:
   | cc | -c | -O         | readxml.c    |        |        |              |    |     |         |
   | cc | -c | -O         | init.c       |        |        |              |    |     |         |
   | cc | -c | -O         | util.c       |        |        |              |    |     |         |
   | cc | -c | -O         | bali_score.c |        |        |              |    |     |         |
   | cc | -o | bali_score | readxml.o    | init.o | util.o | bali_score.o | -O | -lm | -lexpat |

** Step 2: run tests

   #+BEGIN_SRC sh :session onesh
     cd ~/data/bb3_release
     cd .. 

     mkdir -p bb3_release_tmp_aln
     cd bb3_release_tmp_aln
     KALIGNOUTDIR=$PWD 
     echo $KALIGNOUTDIR


   #+END_SRC

   #+RESULTS:
   |                                                                             |
   | sh-4.4$ sh-4.4$ sh-4.4$ sh-4.4$ sh-4.4$ /home/user/data/bb3_release_tmp_aln |
   #+BEGIN_SRC sh :session onesh :results raw
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); printf "kalign -alnp param_25.txt %s -o %s/%s_%skalign25.msf\n", $1,outdir,a[n-2],a[n-1] }' > run_kalign.sh


     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); printf "kalign -alnp param_50.txt  %s -o %s/%s_%skalign50.msf\n", $1,outdir,a[n-2],a[n-1] }' >> run_kalign.sh

     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); printf "kalign -alnp param_75.txt  %s -o %s/%s_%skalign75.msf\n", $1,outdir,a[n-2],a[n-1] }' >> run_kalign.sh

   #+END_SRC 

   #+BEGIN_SRC sh :session onesh :results raw 
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); printf "kalign -alnp testparam  %s -o %s/%s_%skalign.msf\n", $1,outdir,a[n-2],a[n-1] }' > run_kalign.sh

     find ~/data/bb3_release -name "*.tfa"  | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); printf "clustalo --dealign -i  %s --outfmt=msf -o %s/%s_%sclustalo.msf\n", $1,outdir,a[n-2],a[n-1] }' > run_clustalo.sh

     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/);
          printf "kalign %s -set 0 -o %s/%s_%skalign_1.msf\n", $1,outdir,a[n-2],a[n-1] ;
          printf "kalign %s -set 1 -o %s/%s_%skalign_2.msf\n", $1,outdir,a[n-2],a[n-1] ;
          printf "kalign %s -set 2 -o %s/%s_%skalign_3.msf\n", $1,outdir,a[n-2],a[n-1] ;
          printf "kalign %s -set 3 -o %s/%s_%skalign_4.msf\n", $1,outdir,a[n-2],a[n-1] ;
          }' > run_kalign_cmsa.sh


     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/);
          printf "cmsa -a  %s/%s_%skalign_*.msf -out %s/%s_%skalign_cmsa.msf -f msf \n",outdir,a[n-2],a[n-1],outdir,a[n-2],a[n-1] ;
          }' > run_cmsa.sh

     chmod 755 run_kalign_cmsa.sh 


     chmod 755 run_kalign.sh 
     chmod 755 run_clustalo.sh

   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC sh :session onesh :results raw 

     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores.sh

     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_1.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_set1.sh
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_2.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_set2.sh
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_3.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_set3.sh
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_4.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_set4.sh
     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_5.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_set5.sh


     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%skalign_cmsa.msf\n", $1,outdir,a[n-2],a[n-1] }' > alignment_scores_cmsa.sh

     find ~/data/bb3_release -name "*.xml" | awk -v outdir="$KALIGNOUTDIR" '{n=split ($1,a,/[\/,.]/); ;printf "~/data/bb3_release/bali_score_src/bali_score %s %s/%s_%sclustalo.msf\n", $1,outdir,a[n-2],a[n-1] }' >> alignment_scores.sh


     chmod 755 alignment_scores.sh
   #+END_SRC


   #+RESULTS:

   run the tests 

   #+BEGIN_SRC sh :session onesh
     parallel --jobs 5 < ./run_kalign.sh 
     parallel --jobs 5 < ./run_clustalo.sh 
     ./alignment_scores.sh | grep auto > scores2.csv

   #+END_SRC
   
** Step 3: plot scores 

   #+BEGIN_SRC R :session  one :results none :export none 

     library(tidyverse)
     library(ggplot2)
     library(stringi)
     library(cowplot)
     readBaliscores <-function(file,name){
       mat  <- read.table(file);
       colnames(mat) <- c("Type","Name","SP","TC")
       mat$Type <- name
       mat$Name <- sub(".*/" ,"", mat$Name)
       mat$Name <- sub("[A-Z,_]*[.]{1}[A-Z]*$" ,"", mat$Name,ignore.case = TRUE)
       mat <- as.tibble(mat)
       x = str_split(mat$Name, "_", n = Inf, simplify = TRUE)
       mat$Group <- x[,1] 
       return(mat)

     }


   #+END_SRC


   

   #+BEGIN_SRC R :session one :results output graphics :file BalibaseSP_scores.jpeg :exports both :width 160 :height 80

     mat <- readBaliscores("scores_kalign_old.csv","kalign old");
     mat <- rbind(mat,readBaliscores("scores_kalign_new.csv","kalign new"));
     mat <- rbind(mat,readBaliscores("scores_kalign_pbil2.csv","kalign pbil 2"));
     mat <- rbind(mat,readBaliscores("scores_kalign_16seed.csv","kalign 16 seed"));
     mat <- rbind(mat,readBaliscores("scores_kalign_test.csv","rel"))
     ##      mat <- rbind(mat,readBaliscores("scores_kalign_3.csv","kalign 3"));

     ## mata
     ## <- rbind(mat,readBaliscores("scores_kalign_bibpm.csv","bibpm"));
     ## mat 
     ## <- rbind(mat,readBaliscores("scores_kalign_bibpm_zero.csv","bibpm_zero"));


     p1 <- ggplot(mat, aes(Group, SP))
     p1 <- p1 + geom_boxplot(aes(colour = Type))

     means <- aggregate(SP ~  Type, mat, median)
     means$SP <- round(means$SP,digits = 4)
     p2 <- ggplot(mat, aes(Type, SP))
     p2 <- p2 + geom_boxplot(aes(colour = Type))
     p2 <- p2 + stat_summary(fun.y=mean, colour="darkred", geom="point", shape=18, size=3,show.legend = FALSE) 
     p2 <- p2 + geom_text(data = means, aes(label = SP, y = SP + 0.08))

     p3 <- ggplot(mat, aes(Group, TC))
     p3 <- p3 + geom_boxplot(aes(colour = Type))

     means <- aggregate(TC ~  Type, mat, median)
     means$TC <- round(means$TC,digits = 4)

     p4 <- ggplot(mat, aes(Type, TC))
     p4 <- p4 + geom_boxplot(aes(colour = Type))
     p4 <- p4 + geom_boxplot(aes(colour = Type))
     p4 <- p4 + stat_summary(fun.y=mean, colour="darkred", geom="point", shape=18, size=3,show.legend = FALSE) 
     p4 <- p4 + geom_text(data = means, aes(label = TC, y = TC + 0.08))



     p  = plot_grid(p1,p2,p3,p4, labels=c("SP", "TC"), ncol = 2, nrow= 2)




   #+END_SRC

   #+RESULTS:
   [[file:BalibaseSP_scores.jpeg]]



* Benchmarking 

  Programs to test: 

  #+NAME: Benchprograms
  | Name         | Download                                                                     |
  |--------------+------------------------------------------------------------------------------|
  | Muscle       | https://www.drive5.com/muscle/downloads3.8.31/muscle3.8.31_i86linux32.tar.gz |
  | Clustalomega | http://clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64                        |
  | q-score      | https://www.drive5.com/qscore/qscore_src.tar.gz                              |
  
  Since the clustal papers provide a great overview of alignment programs I think these two should suffice. Note I am not comparing kalign against consistency based methods as these are a) all more accurate and b) slower. Kalign is targeted at the accurate and fast niche. 

  Benchmarks: 
  #+NAME: Benchmarkdata 
  | Name           | Download                                                          |
  |----------------+-------------------------------------------------------------------|
  | Balibase1-5    | http://www.lbgi.fr/balibase/BalibaseDownload/BAliBASE_R1-5.tar.gz |
  | Balifam        | http://clustal.org/omega/bali3fam-26.tar.gz                       |
  | Bralibaseset1  | http://projects.binf.ku.dk/pgardner/bralibase/data-set1.tar.gz    |
  | Bralibaseset2  | http://projects.binf.ku.dk/pgardner/bralibase/data-set2.tar.gz    |

** Step one: create test directory and download all data

   #+BEGIN_SRC bash :exports both :results none 
     cd 
     mkdir -p kalignbenchmark
     cd  kalignbenchmark
     mkdir -p data
     mkdir -p programs 
     mkdir -p scratch
   #+END_SRC

*** Download benchmark datasets 
     
    #+BEGIN_SRC bash -n :results raw :exports both :var tbl=Benchmarkdata :colnames yes
      cd
      cd ~/kalignbenchmark/data
      for idx in ${!tbl[*]}; do
          #echo  ${tbl[$idx]} 
          if [[ ${tbl[$idx]} =~ ^http* ]];
          then
              echo "wget ${tbl[$idx]}"
              wget ${tbl[$idx]}
          fi
      done
    #+END_SRC

    #+RESULTS:
    wget http://projects.binf.ku.dk/pgardner/bralibase/data-set2.tar.gz
    wget http://projects.binf.ku.dk/pgardner/bralibase/data-set1.tar.gz
    wget http://clustal.org/omega/bali3fam-26.tar.gz
    wget http://www.lbgi.fr/balibase/BalibaseDownload/BAliBASE_R1-5.tar.gz

    inter all data sets 
    #+BEGIN_SRC bash  :results none :exports code 
      cd
      cd ~/kalignbenchmark/data

      for filename in *.tar.gz; do
          tar -zxvf  $filename
      done
    #+END_SRC

*** Compile baliscore program and place in program directory 

    #+BEGIN_SRC bash

      cd ~/kalignbenchmark/data/bb3_release/bali_score_src

      gcc *.c -lm -lexpat -o bali_score 
      cp bali_score ~/kalignbenchmark/programs

    #+END_SRC

    #+RESULTS:

*** Download  programs 

    #+BEGIN_SRC bash -n :results raw :exports both :var tbl=Benchprograms :colnames yes
      cd
      cd ~/kalignbenchmark/programs
      for idx in ${!tbl[*]}; do
          #echo  ${tbl[$idx]} 
          if [[ ${tbl[$idx]} =~ ^http* ]];
          then
              echo "wget ${tbl[$idx]}"
              wget ${tbl[$idx]}
          fi
      done
      chmod 755 clustalo-1.2.4-Ubuntu-x86_64

      tar -zxvf muscle3.8.31_i86linux32.tar.gz 

      tar -zxvf qscore_src.tar.gz
    #+END_SRC

    #+RESULTS:
    wget https://www.drive5.com/muscle/downloads3.8.31/muscle3.8.31_i86linux32.tar.gz
    wget http://clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64
    muscle3.8.31_i86linux32

*** Compile q-score 

NOTE: this is manual! 

Add:

#+BEGIN_EXAMPLE C
#include <limits.h> 
#+END_EXAMPLE

to qscore header: =qscore.h=  

then: 
#+BEGIN_EXAMPLE bash
make
#+END_EXAMPLE



** Step 2: test  if all programs run 

   Let's make sure individual programs run on all the test sets. 

   small code chunk to set path:

  #+NAME: path
   #+BEGIN_SRC bash :results none :exports code :noweb yes
     export PATH=~/kalignbenchmark/programs:$PATH
   #+END_SRC

*** muscle 

    Can I run muscle? 
    
    #+BEGIN_SRC bash :results value :exports code :noweb yes 
      <<path>>

      muscle3.8.31_i86linux32 -version
    #+END_SRC

    #+RESULTS:
    : MUSCLE v3.8.31 by Robert C. Edgar
    
    Let's try on a balibase case: 

#+BEGIN_SRC bash :results raw :exports code :noweb yes
<<path>> 
IN=~/kalignbenchmark/data/bb3_release/RV11/BB11002.tfa
REF=~/kalignbenchmark/data/bb3_release/RV11/BB11002.msf
OUT=~/kalignbenchmark/scratch/BB11002_muscle.msf 
muscle3.8.31_i86linux32 -msf -in $IN -out $OUT
bali_score $REF $OUT

#+END_SRC

#+RESULTS:
Using GCG format reference alignment

Comparing test alignment in /home/user/kalignbenchmark/scratch/BB11002_muscle.msf
with reference alignment in /home/user/kalignbenchmark/data/bb3_release/RV11/BB11002.msf

	SP score= 0.572

	TC score= 0.270
auto /home/user/kalignbenchmark/scratch/BB11002_muscle.msf 0.572 0.270


    Let's try on a balifam 

#+BEGIN_SRC bash :results raw :exports both :noweb yes
<<path>> 

IN=~/kalignbenchmark/data/BB20021-package.vie
ADD=~/kalignbenchmark/data/bb3_release/RV20/BB20021.tfa
REF=~/kalignbenchmark/data/bb3_release/RV20/BB20021.msf
OUT=~/kalignbenchmark/scratch/BB20021_muscle.fa

cd ~/kalignbenchmark/scratch

cat $IN $ADD > test.fa
time muscle3.8.31_i86linux32 -maxiters 2 -in test.fa -out $OUT
kalign $REF -r -f fasta -o ref.fa
qscore -test $OUT -ref ref.fa

#+END_SRC

#+RESULTS:
[2019-06-11 07:56:02] :     LOG : kalign -r -f fasta -o ref.fa /home/user/kalignbenchmark/data/bb3_release/RV20/BB20021.msf 
[2019-06-11 07:56:02] :     LOG : Detected protein sequences.
[2019-06-11 07:56:02] :     LOG : Detected: 53 sequences.
[2019-06-11 07:56:02] :     LOG : Output in fasta format





